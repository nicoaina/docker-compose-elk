input {
	beats {
		port => 5000
	}
}

filter {
    if [type] == "tomcat-catalina" {
        grok {
            match => [ "message","(?<timestamp>%{MONTHDAY}[./-]%{MONTH}[./-]%{YEAR}%{SPACE}%{TIME})%{SPACE}%{LOGLEVEL:log_level}%{SPACE}\[%{PROG:thread}\]%{SPACE}%{JAVACLASS:class_name}%{SPACE}%{JAVALOGMESSAGE:logmessage}"]
        }

        #aggregate http header events
        if("http-nio" in [thread])
        {
            grok {
                match => [ "logmessage","%{NUMBER:taskid} \*.+(?<action>received|responded)%{DATA}%{PROG}\n(?m)%{JAVALOGMESSAGE:data}"]
            }

            mutate{
                gsub => ["data","[0-9]+ (>|<) ",""]
            }

            if([action] == "received"){
                aggregate {
                    task_id => "%{type}_%{taskid}"
                    code => "map['request'] ||= ''; map['full_message'] ||= ''; map['timestamp_start'] ||= '';
                                                map['request'] = event.get('data');
                                                map['full_message'] = event.get('data');
                                                map['timestamp_start'] = event.get('@timestamp');"
                }

                drop{} #drop the event because it will be aggregated to the response
            }

            if([action] == "responded"){
                aggregate {
                    task_id => "%{type}_%{taskid}"
                    code => "event.set('request', map['request']);
                                        event.set('response', event.get('data'));
                                        event.set('message', map['full_message']+=%{\n\n}+event.get('data'));
                                        event.set('timestamp_start', map['timestamp_start']);
                                        delta = (event.get('@timestamp') - map['timestamp_start']) rescue nil;
                                        event.set('request_duration',delta)"
                    end_of_task => true
                    timeout => 120
                    add_tag => [ "http" ]
                    remove_field => [ "taskid", "action", "data", "logmessage" ]
                }
            }
        }
    }

    if [type] == "tomcat-access" {
        grok {
            match => [ "message", "%{COMMONAPACHELOG}" ]
        }
    }

    if [type] == "notico" {
        grok {
            match => [ "message", "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\[%{PROG:thread}\]%{SPACE}%{LOGLEVEL:log_level}%{SPACE}%{JAVACLASS:class_name}%{SPACE}%{SPACE}-%{SPACE}%{JAVALOGMESSAGE:logmessage}" ]
        }
    }

    if "haproxy.log" in [source] {
        grok {
            match => [ "message", "%{HAPROXYHTTP}" ]
        }
    }

    # store timestamp in @timestamp
    date {
        match => [ "timestamp", "MMM dd yyyy HH:mm:ss", "dd-MMM-yyyy HH:mm:ss.SSS" ]
        remove_field => [ "timestamp"]
    }

}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}
